//Q2
import java.util.Stack;

public class SizedStack<T> extends Stack<T> {
    private int maxSize;

    public SizedStack(int size) {
        super();
        this.maxSize = size;
    }
    public T push(T object) {
        //If the stack is too big, remove elements until it's the right size.
        while (this.size() >= maxSize) {
            this.remove(0);
        }
        return super.push(object);
    }
}


//Q5
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        boolean valid = true;
        if(s.length() % 2 == 0){
            for(int i =0; i < s.length() ; i++){
                char temp = s.charAt(i);
                if(temp == '(' || temp == '[' || temp == '{'){
                    stack.push(temp);
                }
                else{
                    if(stack.size() == 0){
                        return false;
                    }
                    else{
                        char open = stack.peek();
                        if(temp == ')' && open == '('){
                            stack.pop();
                        }
                        else if(temp == ']' && open == '['){
                            stack.pop();
                        }
                        else if(temp == '}' && open == '{'){
                            stack.pop();
                        }
                        else{
                           return false; 
                        }
                        
                    }
                }
            }
            if(stack.size() != 0){
                return false;
            }
        }
        else{
            return false;
        }
        return valid;

        
    }
}


//Q6
import java.util.Stack;
public class Transfer {

    public static Stack<Integer> stackPush(Stack<Integer> stack){

        for(int i = 0; i < 5; i++){

            Integer push = (Integer) stack.push(i);

            System.out.println(push);
        }
        return stack;

    }

    public static void pop(Stack<Integer> stack){

        for(int i = 0; i < 5; i++){

            Integer pop = (Integer) stack.pop();
            System.out.println(pop);


        }

    }
    public static void peek(Stack<Integer> stack){

        Integer peek = (Integer) stack.peek();

        System.out.println("Top of the element is: " + peek);

    }
    public static void search(Stack<Integer> stack, int element){

        System.out.println("Element searched is: ");

        Integer search = (Integer) stack.search(element);

        if(element == -1){

            System.out.println("Stack is empty.");
        }
        else{
            System.out.println("Element is: " + search);
        }
    }

    public static Stack<Integer> transfer(Stack<Integer> stack1, Stack<Integer> stack2){
        stack2 = stackPush(stack1);
        System.out.println("Stack transfered successfully: ");
        return stack2;
    }

    public static void main(String[] args) {

        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();

        Stack<Integer> finalStack = transfer(stack1, stack2);

        

    }



}